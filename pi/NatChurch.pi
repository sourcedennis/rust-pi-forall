module NatChurch where

-- Church encoding of natural numbers

nat : Type
nat = (x:Type) -> x -> (x -> x) -> x
	 
z : nat
z = \x zf sf. zf
	 
s : nat -> nat
s = \n. \x zf sf. sf (n x zf sf)

one : nat
one = s z

two : nat
two = s (s z)

three : nat
three = s (s (s z))

plus : nat -> nat -> nat
plus = \x. \y. x nat y s

test0 : plus one one = two
test0 = Refl

test1 : plus one two = three
test1 = Refl

spec0 : (n : nat) -> plus z n = n
spec0 = \n . Refl

spec1 : (n : nat) -> (m : nat) -> plus (s n) m  = s (plus n m)
spec1 = \n m . Refl

-- The predecessor function is *really* tricky! Don't try this 
-- first if you have never seen it before.

pred : nat -> nat
pred = \n . \x zf sf . n ((x -> x) -> x) (\u . zf) (\g h . h (g sf)) (\u . u)

test_pred : pred two = one
test_pred = Refl

-- Since pi-forall allows recursive definitions, we also have Scott encodings
-- of datatypes available. (See http://en.wikipedia.org/wiki/Mogensen%E2%80%93Scott_encoding.
-- You can't do this in Coq or Agda because it requires an inconsistent logic).

scott_nat : Type
scott_nat = (x:Type) -> x -> (scott_nat -> x) -> x

scott_z : scott_nat
scott_z = \x z s . z

scott_s : scott_nat -> scott_nat
scott_s = \n . \x z s . s n

scott_one : scott_nat
scott_one = scott_s scott_z

scott_two : scott_nat
scott_two = scott_s (scott_s scott_z)

scott_three : scott_nat
scott_three = scott_s (scott_s (scott_s scott_z))

-- Write the predecessor function, it is much easier here

scott_pred : scott_nat -> scott_nat
scott_pred = \n . \x zf sf . n x zf (\g . g x zf sf)

testNC1 : scott_pred scott_two = scott_one
testNC1 = Refl

-- Now write plus: with Scott encoded nats, note that you need to use recursion.

scott_plus : scott_nat -> scott_nat -> scott_nat 
scott_plus = \x. \y. y scott_nat x (\t . scott_s (scott_plus x t))

testNC2 : scott_plus scott_one scott_two = scott_three
testNC2 = Refl
